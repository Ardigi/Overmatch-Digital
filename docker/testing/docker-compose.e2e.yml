version: '3.8'

services:
  # Test PostgreSQL - Isolated instance for E2E tests
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_DB: test_main
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - ./scripts/e2e/init-test-databases.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_main"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test MongoDB - Isolated instance for E2E tests
  mongodb-test:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: test_user
      MONGO_INITDB_ROOT_PASSWORD: test_pass
      MONGO_INITDB_DATABASE: test_documents
    ports:
      - "27018:27017"  # Different port to avoid conflicts
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Redis - Isolated instance for E2E tests
  redis-test:
    image: redis:7-alpine
    command: redis-server --requirepass test_redis_pass
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test_redis_pass", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Elasticsearch - Isolated instance for E2E tests
  elasticsearch-test:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"  # Reduced memory for tests
      - xpack.security.enabled=false
    ports:
      - "9201:9200"  # Different port to avoid conflicts
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Zookeeper
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"  # Different port to avoid conflicts
    networks:
      - test-network

  # Test Kafka
  kafka-test:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper-test
    ports:
      - "9093:9092"  # Different port to avoid conflicts
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-test:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "sh", "-c", "kafka-broker-api-versions --bootstrap-server localhost:29092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Auth Service - Test Instance
  auth-service-test:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3001
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_auth_test
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
      JWT_SECRET: test-jwt-secret-key
      JWT_EXPIRATION: 30m
      MFA_ISSUER: SOC-Test
      # Disable rate limiting for tests
      RATE_LIMIT_WINDOW: 1
      RATE_LIMIT_MAX: 10000
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Client Service - Test Instance
  client-service-test:
    build:
      context: ./services/client-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3002
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_clients_test
      KAFKA_BROKERS: kafka-test:29092
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/v1/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Policy Service - Test Instance
  policy-service-test:
    build:
      context: ./services/policy-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3003
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_policies_test
      KAFKA_BROKERS: kafka-test:29092
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Control Service - Test Instance
  control-service-test:
    build:
      context: .
      dockerfile: ./services/control-service/Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3004
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_controls_test
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Evidence Service - Test Instance
  evidence-service-test:
    build:
      context: .
      dockerfile: ./services/evidence-service/Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3005
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_evidence_test
      MONGO_URI: mongodb://test_user:test_pass@mongodb-test:27017/test_documents
      KAFKA_BROKERS: kafka-test:29092
      # Use local storage for tests
      STORAGE_TYPE: local
      STORAGE_PATH: /tmp/evidence-test
    depends_on:
      postgres-test:
        condition: service_healthy
      mongodb-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Workflow Service - Test Instance
  workflow-service-test:
    build:
      context: ./services/workflow-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3006
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_workflows_test
      KAFKA_BROKERS: kafka-test:29092
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Reporting Service - Test Instance
  reporting-service-test:
    build:
      context: .
      dockerfile: ./services/reporting-service/Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3007
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_reporting_test
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
      # Use local storage for tests
      STORAGE_TYPE: local
      STORAGE_PATH: /tmp/reports-test
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Audit Service - Test Instance
  audit-service-test:
    build:
      context: ./services/audit-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3008
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_audits_test
      KAFKA_BROKERS: kafka-test:29092
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Integration Service - Test Instance
  integration-service-test:
    build:
      context: .
      dockerfile: ./services/integration-service/Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3009
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_integrations_test
      KAFKA_BROKERS: kafka-test:29092
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Notification Service - Test Instance
  notification-service-test:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3010
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
      # Use MailDev for test email capture
      SMTP_HOST: maildev-test
      SMTP_PORT: 1025
      SMTP_SECURE: false
      SMTP_USER: ""
      SMTP_PASS: ""
    depends_on:
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # AI Service - Test Instance
  ai-service-test:
    build:
      context: .
      dockerfile: ./services/ai-service/Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3011
      MONGO_URI: mongodb://test_user:test_pass@mongodb-test:27017/test_ai
      ELASTICSEARCH_NODE: http://elasticsearch-test:9200
      KAFKA_BROKERS: kafka-test:29092
      # Use mock AI provider for tests
      AI_PROVIDER: mock
      OPENAI_API_KEY: test-key
    depends_on:
      mongodb-test:
        condition: service_healthy
      elasticsearch-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # MailDev for test email capture
  maildev-test:
    image: maildev/maildev:latest
    ports:
      - "1080:1080"  # Web interface
      - "1025:1025"  # SMTP
    networks:
      - test-network

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16