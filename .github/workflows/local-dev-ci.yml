name: Local Development CI

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  PUPPETEER_SKIP_DOWNLOAD: 'true'
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      services: ${{ steps.filter.outputs.services }}
      packages: ${{ steps.filter.outputs.packages }}
      shared: ${{ steps.filter.outputs.shared }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'package.json'
            services:
              - 'services/**'
            packages:
              - 'packages/**'
            shared:
              - 'shared/**'

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --ignore-scripts

      - name: Run Biome lint
        run: npm run lint
        continue-on-error: true

      - name: TypeScript type check
        run: npm run type-check
        continue-on-error: true

  test-shared:
    name: Test Shared Packages
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.packages == 'true' || needs.changes.outputs.shared == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --ignore-scripts

      - name: Build shared packages
        run: npm run build:shared

  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    needs: [changes, test-shared]
    if: |
      always() &&
      !cancelled() &&
      (needs.test-shared.result == 'success' || needs.test-shared.result == 'skipped') &&
      needs.changes.outputs.services == 'true'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      fail-fast: false
      matrix:
        service:
          - auth-service
          - client-service
          - policy-service
          - control-service
          - evidence-service
          - workflow-service
          - reporting-service
          - audit-service
          - integration-service
          - notification-service
          - ai-service

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci --legacy-peer-deps --ignore-scripts

      - name: Install service dependencies
        working-directory: services/${{ matrix.service }}
        run: npm ci --legacy-peer-deps --ignore-scripts

      - name: Build shared packages
        run: npm run build:shared

      - name: Create test database
        run: |
          SERVICE_NAME=$(echo ${{ matrix.service }} | sed 's/-service$//' | sed 's/-/_/g')
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE DATABASE soc_${SERVICE_NAME}_test;" || true
        env:
          PGPASSWORD: postgres

      - name: Run unit tests
        working-directory: services/${{ matrix.service }}
        run: npm test -- --passWithNoTests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_NAME: soc_$(echo ${{ matrix.service }} | sed 's/-service$//' | sed 's/-/_/g')_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ''
          JWT_SECRET: test-secret-key
          JWT_EXPIRES_IN: 30m
        continue-on-error: true

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --ignore-scripts

      - name: Run tests
        run: npm test -- --passWithNoTests
        env:
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
        continue-on-error: true

      - name: Build Next.js
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3000/api
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test-shared, test-services, test-frontend]
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "âœ… Local Development CI Complete"
          echo ""
          echo "Results:"
          echo "  Lint: ${{ needs.lint.result }}"
          echo "  Shared: ${{ needs.test-shared.result }}"
          echo "  Services: ${{ needs.test-services.result }}"
          echo "  Frontend: ${{ needs.test-frontend.result }}"
