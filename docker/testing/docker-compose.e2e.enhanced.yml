version: '3.8'

# Enhanced E2E test infrastructure with resource limits and monitoring

services:
  # Test PostgreSQL - Isolated instance for E2E tests
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_DB: test_main
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    ports:
      - "5433:5432"
    volumes:
      - ./scripts/e2e/init-test-databases.sql:/docker-entrypoint-initdb.d/01-init.sql
      - postgres-test-data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_main"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Test MongoDB - Isolated instance for E2E tests
  mongodb-test:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: test_user
      MONGO_INITDB_ROOT_PASSWORD: test_pass
      MONGO_INITDB_DATABASE: test_documents
    ports:
      - "27018:27017"
    volumes:
      - mongodb-test-data:/data/db
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Test Redis - Isolated instance for E2E tests
  redis-test:
    image: redis:7-alpine
    command: >
      redis-server 
      --requirepass test_redis_pass
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test_redis_pass", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Test Elasticsearch - Isolated instance for E2E tests
  elasticsearch-test:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - action.destructive_requires_name=false
      - indices.query.bool.max_clause_count=4096
    ports:
      - "9201:9200"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Test Zookeeper
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2182:2181"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Test Kafka
  kafka-test:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper-test:
        condition: service_healthy
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-test:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_MS: 600000  # 10 minutes retention for test data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # MailDev for test email capture
  maildev-test:
    image: maildev/maildev:latest
    ports:
      - "1080:1080"  # Web interface
      - "1025:1025"  # SMTP
    networks:
      - test-network
    environment:
      MAILDEV_INCOMING_USER: ''
      MAILDEV_INCOMING_PASS: ''
      MAILDEV_WEB_USER: ''
      MAILDEV_WEB_PASS: ''
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:1080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Auth Service - Test Instance
  auth-service-test:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3001
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_auth_test
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: auth-service-test
      KAFKA_GROUP_ID: auth-service-test-group
      JWT_SECRET: test-jwt-secret-key
      JWT_EXPIRATION: 30m
      MFA_ISSUER: SOC-Test
      # Disable rate limiting for tests
      RATE_LIMIT_WINDOW: 1
      RATE_LIMIT_MAX: 10000
      # Email settings
      EMAIL_HOST: maildev-test
      EMAIL_PORT: 1025
      EMAIL_SECURE: false
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
      maildev-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Client Service - Test Instance
  client-service-test:
    build:
      context: ./services/client-service
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3002
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_clients_test
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: client-service-test
      KAFKA_GROUP_ID: client-service-test-group
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3002/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Policy Service - Test Instance
  policy-service-test:
    build:
      context: ./services/policy-service
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3003
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_policies_test
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: policy-service-test
      KAFKA_GROUP_ID: policy-service-test-group
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Control Service - Test Instance
  control-service-test:
    build:
      context: .
      dockerfile: ./services/control-service/Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3004
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_controls_test
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: control-service-test
      KAFKA_GROUP_ID: control-service-test-group
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Evidence Service - Test Instance
  evidence-service-test:
    build:
      context: .
      dockerfile: ./services/evidence-service/Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3005
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_evidence_test
      MONGO_URI: mongodb://test_user:test_pass@mongodb-test:27017/test_documents?authSource=admin
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: evidence-service-test
      KAFKA_GROUP_ID: evidence-service-test-group
      # Use local storage for tests
      STORAGE_TYPE: local
      STORAGE_PATH: /tmp/evidence-test
      MAX_FILE_SIZE: 10485760  # 10MB for tests
    depends_on:
      postgres-test:
        condition: service_healthy
      mongodb-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - evidence-test-data:/tmp/evidence-test
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3005/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Workflow Service - Test Instance
  workflow-service-test:
    build:
      context: ./services/workflow-service
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3006
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_workflows_test
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: workflow-service-test
      KAFKA_GROUP_ID: workflow-service-test-group
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3006/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Reporting Service - Test Instance
  reporting-service-test:
    build:
      context: .
      dockerfile: ./services/reporting-service/Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3007
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_reporting_test
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: reporting-service-test
      KAFKA_GROUP_ID: reporting-service-test-group
      # Use local storage for tests
      STORAGE_TYPE: local
      STORAGE_PATH: /tmp/reports-test
      ENCRYPTION_KEY: test-encryption-key-32-chars-long!!
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - reports-test-data:/tmp/reports-test
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3007/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Audit Service - Test Instance
  audit-service-test:
    build:
      context: ./services/audit-service
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3008
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_audits_test
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: audit-service-test
      KAFKA_GROUP_ID: audit-service-test-group
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3008/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Integration Service - Test Instance
  integration-service-test:
    build:
      context: .
      dockerfile: ./services/integration-service/Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3009
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_integrations_test
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: integration-service-test
      KAFKA_GROUP_ID: integration-service-test-group
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3009/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Notification Service - Test Instance
  notification-service-test:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3010
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_USERNAME: test_user
      DB_PASSWORD: test_pass
      DB_NAME: soc_notifications_test
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_PASSWORD: test_redis_pass
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: notification-service-test
      KAFKA_GROUP_ID: notification-service-test-group
      # Use MailDev for test email capture
      SMTP_HOST: maildev-test
      SMTP_PORT: 1025
      SMTP_SECURE: false
      SMTP_USER: ""
      SMTP_PASS: ""
      EMAIL_FROM: noreply@test-soc.com
      # Disable rate limiting for tests
      NOTIFICATION_RATE_LIMIT: 10000
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
      maildev-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3010/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # AI Service - Test Instance
  ai-service-test:
    build:
      context: .
      dockerfile: ./services/ai-service/Dockerfile
      cache_from:
        - node:20-alpine
    environment:
      NODE_ENV: test
      PORT: 3011
      MONGO_URI: mongodb://test_user:test_pass@mongodb-test:27017/test_ai?authSource=admin
      ELASTICSEARCH_NODE: http://elasticsearch-test:9200
      KAFKA_BROKERS: kafka-test:29092
      KAFKA_CLIENT_ID: ai-service-test
      KAFKA_GROUP_ID: ai-service-test-group
      # Use mock AI provider for tests
      AI_PROVIDER: mock
      OPENAI_API_KEY: test-key
      AI_REQUEST_TIMEOUT: 5000
      AI_MAX_RETRIES: 1
    depends_on:
      mongodb-test:
        condition: service_healthy
      elasticsearch-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3011/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Test Result Aggregator (for monitoring)
  test-monitor:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./scripts/e2e/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-test-data:/prometheus
    networks:
      - test-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=24h'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-test-data:
    driver: local
  mongodb-test-data:
    driver: local
  evidence-test-data:
    driver: local
  reports-test-data:
    driver: local
  prometheus-test-data:
    driver: local