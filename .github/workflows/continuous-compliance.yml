name: Continuous Compliance

on:
  push:
    branches: [main, develop, 'release/*']
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily compliance check at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Run full compliance scan'
        required: false
        default: 'false'

env:
  NODE_VERSION: '18.x'
  CACHE_NAME: 'compliance-cache'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
      
      - name: Install dependencies
        run: npm ci --quiet
      
      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --moderate
        continue-on-error: true
      
      - name: Scan for hardcoded secrets
        run: |
          npx secretlint "**/*" --secretlintrc .secretlintrc.json
        continue-on-error: true
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for vulnerable dependencies
        run: |
          npx better-npm-audit audit
        continue-on-error: true

  type-safety:
    name: Type Safety Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --quiet
      
      - name: Build shared packages
        run: npm run build:shared
      
      - name: Check for 'as any' in production code
        run: |
          echo "Checking for type safety violations..."
          if grep -r "as any" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=coverage --exclude="*.spec.ts" --exclude="*.test.ts" services/ app/; then
            echo "❌ Found 'as any' in production code!"
            exit 1
          else
            echo "✅ No type safety violations found"
          fi
      
      - name: TypeScript compilation check
        run: |
          for service in services/*; do
            if [ -f "$service/tsconfig.json" ]; then
              echo "Checking $service..."
              (cd $service && npx tsc --noEmit) || exit 1
            fi
          done
      
      - name: Strict null checks
        run: |
          echo "Verifying strict null checks are enabled..."
          for config in services/*/tsconfig.json app/tsconfig.json; do
            if [ -f "$config" ]; then
              if ! grep -q '"strictNullChecks": true' "$config"; then
                echo "❌ Strict null checks not enabled in $config"
                exit 1
              fi
            fi
          done

  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --quiet
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
      
      - name: Run Prettier check
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"
      
      - name: Check for console.log statements
        run: |
          if grep -r "console.log" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=dist --exclude="*.spec.ts" --exclude="*.test.ts" services/ app/; then
            echo "⚠️ Found console.log statements in production code"
          fi
      
      - name: Check for TODO/FIXME comments
        run: |
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=dist services/ app/ | wc -l)
          echo "Found $TODO_COUNT TODO/FIXME comments"
          if [ $TODO_COUNT -gt 50 ]; then
            echo "⚠️ Too many unresolved TODOs ($TODO_COUNT)"
            exit 1
          fi

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: soc_user
          POSTGRES_PASSWORD: soc_pass
          POSTGRES_DB: soc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --quiet
      
      - name: Build shared packages
        run: npm run build:shared
      
      - name: Run tests with coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: soc_user
          DB_PASSWORD: soc_pass
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test
        run: |
          npm run test:coverage || true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
      
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(npx coverage-percentage ./coverage/lcov.info --lcov)
          echo "Overall coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Coverage below 70% threshold"
            exit 1
          fi

  soc2-compliance:
    name: SOC 2 Compliance Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --quiet
      
      - name: Check audit logging implementation
        run: |
          echo "Verifying audit logging is implemented..."
          AUDIT_COUNT=$(grep -r "@Observable\|@Traced\|@Metered" --include="*.ts" services/ | wc -l)
          if [ $AUDIT_COUNT -lt 100 ]; then
            echo "⚠️ Insufficient audit logging coverage ($AUDIT_COUNT decorators found)"
          else
            echo "✅ Audit logging coverage: $AUDIT_COUNT decorators"
          fi
      
      - name: Verify encryption at rest
        run: |
          echo "Checking encryption configurations..."
          if ! grep -r "encryptionKey\|@InjectSecret" --include="*.ts" services/ | grep -q "database.encryption"; then
            echo "⚠️ Database encryption not properly configured"
            exit 1
          fi
      
      - name: Check authentication requirements
        run: |
          echo "Verifying authentication guards..."
          UNPROTECTED=$(grep -r "@Controller\|@Get\|@Post\|@Put\|@Delete" --include="*.controller.ts" services/ | grep -v "@UseGuards" | wc -l)
          if [ $UNPROTECTED -gt 10 ]; then
            echo "⚠️ Found $UNPROTECTED potentially unprotected endpoints"
          fi
      
      - name: Verify data retention policies
        run: |
          echo "Checking data retention configurations..."
          if [ -f "services/audit-service/src/config/retention.config.ts" ]; then
            echo "✅ Data retention policies configured"
          else
            echo "⚠️ Data retention policies not found"
          fi
      
      - name: Check for PII handling
        run: |
          echo "Scanning for PII exposure..."
          PII_PATTERNS="ssn|social.security|credit.card|password|secret"
          if grep -r -i "$PII_PATTERNS" --include="*.log" --include="*.ts" services/ | grep -v "@Redacted\|@Masked"; then
            echo "⚠️ Potential PII exposure detected"
          fi

  infrastructure-compliance:
    name: Infrastructure Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate Docker configurations
        run: |
          echo "Checking Docker security..."
          if grep -r "USER root" docker*/Dockerfile; then
            echo "⚠️ Running containers as root detected"
          fi
          
          if ! grep -r "HEALTHCHECK" docker*/Dockerfile; then
            echo "⚠️ Missing health checks in Docker containers"
          fi
      
      - name: Check Kubernetes manifests
        run: |
          if [ -d "k8s" ]; then
            echo "Validating Kubernetes configurations..."
            # Check for security contexts
            if ! grep -r "securityContext" k8s/; then
              echo "⚠️ Missing security contexts in K8s manifests"
            fi
            
            # Check for resource limits
            if ! grep -r "resources:" k8s/ | grep -q "limits"; then
              echo "⚠️ Missing resource limits in K8s manifests"
            fi
          fi
      
      - name: Validate environment variables
        run: |
          echo "Checking for secure environment variable usage..."
          if grep -r "process.env" --include="*.ts" services/ | grep -v "process.env.NODE_ENV"; then
            ENV_COUNT=$(grep -r "process.env" --include="*.ts" services/ | wc -l)
            echo "ℹ️ Found $ENV_COUNT environment variable references"
          fi

  dependency-check:
    name: Dependency License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --quiet
      
      - name: Check licenses
        run: |
          npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD;ISC;CC0-1.0;Unlicense' || true
      
      - name: Check for outdated packages
        run: |
          npm outdated || true
      
      - name: Security advisory check
        run: |
          npx is-my-node-vulnerable || true

  compliance-report:
    name: Generate Compliance Report
    needs: [security-scan, type-safety, code-quality, test-coverage, soc2-compliance, infrastructure-compliance, dependency-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate compliance report
        run: |
          cat > compliance-report.md << EOF
          # Compliance Report - $(date +%Y-%m-%d)
          
          ## Summary
          - Security Scan: ${{ needs.security-scan.result }}
          - Type Safety: ${{ needs.type-safety.result }}
          - Code Quality: ${{ needs.code-quality.result }}
          - Test Coverage: ${{ needs.test-coverage.result }}
          - SOC 2 Compliance: ${{ needs.soc2-compliance.result }}
          - Infrastructure: ${{ needs.infrastructure-compliance.result }}
          - Dependencies: ${{ needs.dependency-check.result }}
          
          ## Recommendations
          $(if [ "${{ needs.security-scan.result }}" != "success" ]; then echo "- Address security vulnerabilities"; fi)
          $(if [ "${{ needs.type-safety.result }}" != "success" ]; then echo "- Fix type safety issues"; fi)
          $(if [ "${{ needs.test-coverage.result }}" != "success" ]; then echo "- Improve test coverage"; fi)
          
          ## Next Steps
          - Review failed checks
          - Create issues for remediation
          - Schedule fixes in next sprint
          EOF
      
      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.md
      
      - name: Post to Slack (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="✅ Passed"
          if [ "${{ needs.security-scan.result }}" != "success" ] || [ "${{ needs.type-safety.result }}" != "success" ]; then
            STATUS="❌ Failed"
          fi
          
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d "{\"text\":\"Compliance Check $STATUS - <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Results>\"}"