name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'auth-service'
          - 'client-service'
          - 'policy-service'
          - 'control-service'
          - 'evidence-service'
          - 'workflow-service'
          - 'reporting-service'
          - 'audit-service'
          - 'integration-service'
          - 'notification-service'
          - 'ai-service'
          - 'frontend'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  NODE_VERSION: '18.x'
  STAGING_NAMESPACE: soc-staging

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - name: auth-service
            context: .
            dockerfile: ./services/auth-service/Dockerfile
          - name: client-service
            context: .
            dockerfile: ./services/client-service/Dockerfile
          - name: policy-service
            context: .
            dockerfile: ./services/policy-service/Dockerfile
          - name: control-service
            context: .
            dockerfile: ./services/control-service/Dockerfile
          - name: evidence-service
            context: .
            dockerfile: ./services/evidence-service/Dockerfile
          - name: workflow-service
            context: .
            dockerfile: ./services/workflow-service/Dockerfile
          - name: reporting-service
            context: .
            dockerfile: ./services/reporting-service/Dockerfile
          - name: audit-service
            context: .
            dockerfile: ./services/audit-service/Dockerfile
          - name: integration-service
            context: .
            dockerfile: ./services/integration-service/Dockerfile
          - name: notification-service
            context: .
            dockerfile: ./services/notification-service/Dockerfile
          - name: ai-service
            context: .
            dockerfile: ./services/ai-service/Dockerfile
    
    steps:
      - name: Check if should build
        id: check
        run: |
          if [ -z "${{ github.event.inputs.service }}" ] || [ "${{ github.event.inputs.service }}" == "${{ matrix.name }}" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
      
      - uses: actions/checkout@v4
        if: steps.check.outputs.should_build == 'true'
      
      - name: Setup Node.js
        if: steps.check.outputs.should_build == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install and Build Shared Packages
        if: steps.check.outputs.should_build == 'true'
        run: |
          npm ci
          npm run build --workspace=packages/auth-common
          npm run build --workspace=shared/contracts
          npm run build --workspace=shared/events
      
      - name: Set up Docker Buildx
        if: steps.check.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: steps.check.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        if: steps.check.outputs.should_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        if: steps.check.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_NAME=${{ matrix.name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    if: github.event.inputs.service == '' || github.event.inputs.service == 'frontend'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Next.js application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://staging.api.soc-platform.com
          NEXT_PUBLIC_USE_KONG: 'true'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:staging
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  run-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g typeorm
      
      - name: Run migrations for each service
        env:
          DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          DB_PORT: ${{ secrets.STAGING_DB_PORT }}
          DB_USERNAME: ${{ secrets.STAGING_DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
        run: |
          services=("auth" "client" "policy" "control" "evidence" "workflow" "reporting" "audit" "integration" "notification" "ai")
          
          for service in "${services[@]}"; do
            echo "Running migrations for $service service..."
            cd services/${service}-service
            
            # Create database if not exists
            PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USERNAME -d postgres -c "CREATE DATABASE IF NOT EXISTS soc_${service}_staging;"
            
            # Run migrations
            DB_NAME=soc_${service}_staging npm run migration:run || echo "No migrations to run for $service"
            
            cd ../..
          done

  deploy-services:
    name: Deploy Services to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, build-frontend, run-migrations]
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV
      
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.STAGING_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry ghcr-login-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=${{ env.STAGING_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install soc-platform ./helm/soc-platform \
            --namespace ${{ env.STAGING_NAMESPACE }} \
            --values ./helm/soc-platform/values.yaml \
            --values ./helm/soc-platform/values.staging.yaml \
            --set global.image.tag=${{ github.sha }} \
            --set global.image.registry=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }} \
            --set global.imagePullSecrets[0].name=ghcr-login-secret \
            --set-string global.env=staging \
            --wait \
            --timeout 10m

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-services
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd test/e2e
          npm ci
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 60
      
      - name: Run smoke tests
        env:
          API_URL: https://staging.api.soc-platform.com
          FRONTEND_URL: https://staging.soc-platform.com
        run: |
          cd test/e2e
          npm run test:smoke
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results
          path: test/e2e/results/

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-services, smoke-tests]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging Deployment: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              description: 'Staging deployment',
              auto_merge: false,
              required_contexts: []
            });

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: failure()
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV
      
      - name: Rollback deployment
        run: |
          echo "Rolling back staging deployment..."
          helm rollback soc-platform --namespace ${{ env.STAGING_NAMESPACE }}
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Staging deployment failed and was rolled back",
              attachments: [{
                color: 'warning',
                fields: [
                  { title: 'Environment', value: 'Staging', short: true },
                  { title: 'Commit', value: '${{ github.sha }}', short: true },
                  { title: 'Author', value: '${{ github.actor }}', short: true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}