version: '3.8'

# Docker Compose override for secrets management monitoring
# Usage: docker-compose -f docker-compose.yml -f docker-compose.secrets-monitoring.yml up

services:
  # Extend Prometheus with secrets monitoring configuration
  prometheus:
    volumes:
      - ./monitoring/prometheus/alerts/secrets-alerts.yml:/etc/prometheus/alerts/secrets-alerts.yml:ro
    environment:
      - PROMETHEUS_RETENTION_TIME=30d
      - PROMETHEUS_STORAGE_RETENTION_SIZE=10GB

  # Extend Grafana with secrets dashboards
  grafana:
    volumes:
      - ./monitoring/grafana/dashboards/secrets-operations.json:/var/lib/grafana/dashboards/secrets-operations.json:ro
      - ./monitoring/grafana/dashboards/secrets-security.json:/var/lib/grafana/dashboards/secrets-security.json:ro
      - ./monitoring/grafana/dashboards/secrets-providers.json:/var/lib/grafana/dashboards/secrets-providers.json:ro
    environment:
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/secrets-operations.json

  # HashiCorp Vault for secrets management (if using Vault provider)
  vault:
    image: vault:1.13.1
    container_name: soc-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-root-token"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
    command: ["vault", "server", "-dev", "-dev-listen-address=0.0.0.0:8200"]
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - soc-network

  # LocalStack for AWS services testing (if using AWS Secrets Manager)
  localstack:
    image: localstack/localstack:2.0
    container_name: soc-localstack
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - SERVICES=secretsmanager,kms,iam
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker-reuse
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      - localstack-data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - soc-network

  # Secrets monitoring exporter (custom service to expose secrets metrics)
  secrets-exporter:
    build:
      context: .
      dockerfile: Dockerfile.secrets-exporter
    container_name: soc-secrets-exporter
    ports:
      - "9090:9090"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=dev-root-token
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - METRICS_PORT=9090
      - METRICS_PATH=/metrics
      - CHECK_INTERVAL=30
    depends_on:
      vault:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - soc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Enhanced AlertManager configuration for secrets alerts
  alertmanager:
    volumes:
      - ./monitoring/alertmanager/secrets-config.yml:/etc/alertmanager/secrets-config.yml:ro
    environment:
      - ALERTMANAGER_CONFIG_FILE=/etc/alertmanager/secrets-config.yml

  # ElasticSearch for secrets audit logs
  elasticsearch:
    environment:
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "xpack.monitoring.collection.enabled=true"
    volumes:
      - elasticsearch-secrets-data:/usr/share/elasticsearch/data

  # Kibana with secrets audit dashboard
  kibana:
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=soc-kibana
      - XPACK_MONITORING_ENABLED=true
    volumes:
      - ./monitoring/kibana/secrets-dashboard.json:/usr/share/kibana/config/secrets-dashboard.json:ro

  # Jaeger for distributed tracing of secrets operations
  jaeger:
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

volumes:
  vault-data:
    driver: local
  vault-logs:
    driver: local
  localstack-data:
    driver: local
  elasticsearch-secrets-data:
    driver: local

networks:
  soc-network:
    driver: bridge