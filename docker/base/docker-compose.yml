services:
  # Kong API Gateway
  kong:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled,jwt
    ports:
      - "8000:8000"  # Proxy
      - "8443:8443"  # Proxy SSL
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin API SSL
    networks:
      - soc-network
    volumes:
      - ./gateway/kong.yml:/usr/local/kong/declarative/kong.yml

  # PostgreSQL for microservices
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-soc_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-soc_compliance}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - soc-network

  # MongoDB for document storage
  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-soc_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-soc_documents}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - soc-network

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - soc-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - soc-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - soc-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - soc-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - soc-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${AUTH_SERVICE_PORT:-3001}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${AUTH_DB_NAME:-soc_auth}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-1d}
      MFA_ISSUER: ${MFA_ISSUER:-SOC-Compliance}
    ports:
      - "${AUTH_SERVICE_PORT:-3001}:${AUTH_SERVICE_PORT:-3001}"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - soc-network

  # Client Service
  client-service:
    build:
      context: ./services/client-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${CLIENT_SERVICE_PORT:-3002}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${CLIENT_DB_NAME:-soc_clients}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
    ports:
      - "${CLIENT_SERVICE_PORT:-3002}:${CLIENT_SERVICE_PORT:-3002}"
    depends_on:
      - postgres
      - kafka
    networks:
      - soc-network

  # Audit Service
  audit-service:
    build:
      context: ./services/audit-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${AUDIT_SERVICE_PORT:-3008}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${AUDIT_DB_NAME:-soc_audits}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
    ports:
      - "${AUDIT_SERVICE_PORT:-3008}:${AUDIT_SERVICE_PORT:-3008}"
    depends_on:
      - postgres
      - kafka
    networks:
      - soc-network

  # Evidence Service
  evidence-service:
    build:
      context: .
      dockerfile: ./services/evidence-service/Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${EVIDENCE_SERVICE_PORT:-3005}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${EVIDENCE_DB_NAME:-soc_evidence}
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-soc_user}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_EVIDENCE_DB:-soc_documents}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - "${EVIDENCE_SERVICE_PORT:-3005}:${EVIDENCE_SERVICE_PORT:-3005}"
    depends_on:
      - postgres
      - mongodb
      - kafka
    networks:
      - soc-network

  # Policy Service
  policy-service:
    build:
      context: ./services/policy-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${POLICY_SERVICE_PORT:-3003}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POLICY_DB_NAME:-soc_policies}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
      OPA_URL: ${OPA_URL:-http://opa:8181}
    ports:
      - "${POLICY_SERVICE_PORT:-3003}:${POLICY_SERVICE_PORT:-3003}"
    depends_on:
      - postgres
      - kafka
      - opa
    networks:
      - soc-network

  # Control Service
  control-service:
    build:
      context: .
      dockerfile: ./services/control-service/Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${CONTROL_SERVICE_PORT:-3004}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${CONTROL_DB_NAME:-soc_controls}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
    ports:
      - "${CONTROL_SERVICE_PORT:-3004}:${CONTROL_SERVICE_PORT:-3004}"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - soc-network

  # Project Service (removed - functionality in client-service)
  # project-service:
  #   build:
  #     context: ./services/project-service
  #     dockerfile: Dockerfile
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3006
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_USERNAME: soc_user
  #     DB_PASSWORD: soc_pass
  #     DB_NAME: soc_projects
  #     KAFKA_BROKERS: kafka:29092
  #   ports:
  #     - "3006:3006"
  #   depends_on:
  #     - postgres
  #     - kafka
  #   networks:
  #     - soc-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${NOTIFICATION_SERVICE_PORT:-3010}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    ports:
      - "${NOTIFICATION_SERVICE_PORT:-3010}:${NOTIFICATION_SERVICE_PORT:-3010}"
    depends_on:
      - redis
      - kafka
    networks:
      - soc-network

  # Reporting Service
  reporting-service:
    build:
      context: ./services/reporting-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${REPORTING_SERVICE_PORT:-3007}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${REPORTING_DB_NAME:-soc_reports}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
      S3_BUCKET: ${S3_BUCKET}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - "${REPORTING_SERVICE_PORT:-3007}:${REPORTING_SERVICE_PORT:-3007}"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - soc-network

  # Integration Service
  integration-service:
    build:
      context: ./services/integration-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${INTEGRATION_SERVICE_PORT:-3009}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-soc_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${INTEGRATION_DB_NAME:-soc_integrations}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
    ports:
      - "${INTEGRATION_SERVICE_PORT:-3009}:${INTEGRATION_SERVICE_PORT:-3009}"
    depends_on:
      - postgres
      - kafka
    networks:
      - soc-network

  # AI Service
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${AI_SERVICE_PORT:-3011}
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-soc_user}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_AI_DB:-soc_ai}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE:-http://elasticsearch:9200}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:29092}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "${AI_SERVICE_PORT:-3011}:${AI_SERVICE_PORT:-3011}"
    depends_on:
      - mongodb
      - elasticsearch
      - kafka
    networks:
      - soc-network

  # Open Policy Agent
  opa:
    image: openpolicyagent/opa:latest-envoy
    ports:
      - "8181:8181"
    command:
      - "run"
      - "--server"
      - "--log-level=info"
    volumes:
      - ./services/policy-service/src/modules/opa/policies:/policies
    networks:
      - soc-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - soc-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3030}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - soc-network

  # HashiCorp Vault for secrets management (dev mode)
  vault:
    image: hashicorp/vault:1.15
    container_name: vault-dev
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN:-soc-dev-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    command: vault server -dev -dev-root-token-id=${VAULT_DEV_ROOT_TOKEN:-soc-dev-token}
    networks:
      - soc-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres-data:
  mongo-data:
  elastic-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  soc-network:
    driver: bridge