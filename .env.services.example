# Service Authentication Configuration
# This file contains example service API keys for inter-service communication
# In production, these should be stored in a secure vault (AWS Secrets Manager, HashiCorp Vault, etc.)

# Service JWT Secret for generating service tokens
SERVICE_JWT_SECRET=your-service-jwt-secret-here

# Service API Keys
# Format: SERVICE_API_KEY_<SERVICE_NAME_UPPERCASE>
SERVICE_API_KEY_AUTH_SERVICE=auth-service-api-key-example
SERVICE_API_KEY_CLIENT_SERVICE=client-service-api-key-example
SERVICE_API_KEY_POLICY_SERVICE=policy-service-api-key-example
SERVICE_API_KEY_CONTROL_SERVICE=control-service-api-key-example
SERVICE_API_KEY_EVIDENCE_SERVICE=evidence-service-api-key-example
SERVICE_API_KEY_WORKFLOW_SERVICE=workflow-service-api-key-example
SERVICE_API_KEY_REPORTING_SERVICE=reporting-service-api-key-example
SERVICE_API_KEY_AUDIT_SERVICE=audit-service-api-key-example
SERVICE_API_KEY_INTEGRATION_SERVICE=integration-service-api-key-example
SERVICE_API_KEY_NOTIFICATION_SERVICE=notification-service-api-key-example
SERVICE_API_KEY_AI_SERVICE=ai-service-api-key-example

# Example of how to generate secure API keys:
# openssl rand -hex 32
# or
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

# Service Discovery Configuration
SERVICE_DISCOVERY_PROVIDER=internal  # Options: internal, consul, kubernetes
SERVICE_HEALTH_CHECK_INTERVAL=60000  # 60 seconds
SERVICE_TIMEOUT=30000  # 30 seconds
SERVICE_RETRIES=3

# Circuit Breaker Configuration
CIRCUIT_BREAKER_THRESHOLD=5
CIRCUIT_BREAKER_TIMEOUT=60000
CIRCUIT_BREAKER_RESET_TIMEOUT=30000