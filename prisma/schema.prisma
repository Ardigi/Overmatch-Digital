// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication & Users
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  password          String?
  name              String?
  image             String?
  role              UserRole  @default(CLIENT_USER)
  mfaEnabled        Boolean   @default(false)
  mfaSecret         String?   @db.Text
  
  // Security fields
  failedAttempts    Int       @default(0)
  lockedUntil       DateTime?
  lastLoginAt       DateTime?
  lastLoginIp       String?
  passwordChangedAt DateTime  @default(now())
  requirePasswordChange Boolean @default(false)
  
  // Relationships
  accounts          Account[]
  sessions          Session[]
  organizations     OrganizationUser[]
  auditLogs         AuditLog[]
  notifications     Notification[]
  securityEvents    SecurityEvent[]
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([email])
  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  
  @@index([userId])
  @@index([expires])
}

// Organizations & Teams
model Organization {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  logo              String?
  website           String?
  industry          String?
  size              CompanySize?
  
  // Relationships
  users             OrganizationUser[]
  projects          Project[]
  documents         Document[]
  controls          Control[]
  risks             Risk[]
  
  // Compliance
  complianceStatus  ComplianceStatus    @default(NOT_STARTED)
  lastAuditDate     DateTime?
  nextAuditDate     DateTime?
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model OrganizationUser {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole      @default(MEMBER)
  permissions    String[]     @default([])
  
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([userId, organizationId])
}

// Projects & Audits
model Project {
  id                String          @id @default(cuid())
  name              String
  description       String?
  type              ProjectType
  status            ProjectStatus   @default(PLANNING)
  framework         Framework[]
  
  // Dates
  startDate         DateTime?
  targetEndDate     DateTime?
  actualEndDate     DateTime?
  auditPeriodStart  DateTime?
  auditPeriodEnd    DateTime?
  
  // Relationships
  organizationId    String
  organization      Organization    @relation(fields: [organizationId], references: [id])
  auditorId         String?
  evidenceItems     Evidence[]
  findings          Finding[]
  tasks             Task[]
  reports           Report[]
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// Controls & Evidence
model Control {
  id              String          @id @default(cuid())
  code            String
  title           String
  description     String          @db.Text
  category        String
  framework       Framework[]
  
  // Relationships
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id])
  evidenceItems   Evidence[]
  testResults     TestResult[]
  risks           Risk[]
  
  // Status
  implementationStatus ImplementationStatus @default(NOT_IMPLEMENTED)
  effectiveness   Effectiveness?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([organizationId, code])
}

model Evidence {
  id              String          @id @default(cuid())
  title           String
  description     String?
  type            EvidenceType
  
  // File information
  fileUrl         String?
  fileName        String?
  fileSize        Int?
  mimeType        String?
  
  // Metadata
  collectedDate   DateTime        @default(now())
  expiryDate      DateTime?
  isAutomated     Boolean         @default(false)
  
  // Relationships
  projectId       String
  project         Project         @relation(fields: [projectId], references: [id])
  controlId       String
  control         Control         @relation(fields: [controlId], references: [id])
  collectorId     String?
  
  // Verification
  verified        Boolean         @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Findings & Risks
model Finding {
  id              String          @id @default(cuid())
  title           String
  description     String          @db.Text
  severity        Severity
  status          FindingStatus   @default(OPEN)
  
  // Relationships
  projectId       String
  project         Project         @relation(fields: [projectId], references: [id])
  riskId          String?
  risk            Risk?           @relation(fields: [riskId], references: [id])
  
  // Remediation
  remediationPlan String?         @db.Text
  targetDate      DateTime?
  actualDate      DateTime?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Risk {
  id              String          @id @default(cuid())
  title           String
  description     String          @db.Text
  likelihood      RiskLevel
  impact          RiskLevel
  inherentRisk    RiskLevel
  residualRisk    RiskLevel?
  
  // Relationships
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id])
  controls        Control[]
  findings        Finding[]
  
  // Mitigation
  mitigationPlan  String?         @db.Text
  owner           String?
  reviewDate      DateTime?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Tasks & Workflow
model Task {
  id              String          @id @default(cuid())
  title           String
  description     String?         @db.Text
  type            TaskType
  status          TaskStatus      @default(TODO)
  priority        Priority        @default(MEDIUM)
  
  // Assignment
  assigneeId      String?
  dueDate         DateTime?
  completedDate   DateTime?
  
  // Relationships
  projectId       String
  project         Project         @relation(fields: [projectId], references: [id])
  parentId        String?
  parent          Task?           @relation("TaskSubtasks", fields: [parentId], references: [id])
  subtasks        Task[]          @relation("TaskSubtasks")
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Documents & Reports
model Document {
  id              String          @id @default(cuid())
  title           String
  type            DocumentType
  version         String          @default("1.0")
  
  // Content
  content         String?         @db.Text
  fileUrl         String?
  
  // Metadata
  isTemplate      Boolean         @default(false)
  isPublished     Boolean         @default(false)
  publishedAt     DateTime?
  
  // Relationships
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id])
  authorId        String
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Report {
  id              String          @id @default(cuid())
  title           String
  type            ReportType
  status          ReportStatus    @default(DRAFT)
  
  // Content
  executiveSummary String?        @db.Text
  content         Json?
  
  // Relationships
  projectId       String
  project         Project         @relation(fields: [projectId], references: [id])
  
  // Sign-offs
  preparedBy      String?
  preparedDate    DateTime?
  reviewedBy      String?
  reviewedDate    DateTime?
  approvedBy      String?
  approvedDate    DateTime?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Test Results
model TestResult {
  id              String          @id @default(cuid())
  controlId       String
  control         Control         @relation(fields: [controlId], references: [id])
  
  // Test details
  testDate        DateTime
  testerName      String
  testType        TestType
  sampleSize      Int?
  
  // Results
  passed          Boolean
  exceptions      Int             @default(0)
  observations    String?         @db.Text
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Audit Trail
model AuditLog {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  
  action          String
  entity          String
  entityId        String
  changes         Json?
  ipAddress       String?
  userAgent       String?
  sessionId       String?
  
  createdAt       DateTime        @default(now())
  
  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
}

// Notifications
model Notification {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  
  type            NotificationType
  title           String
  message         String
  data            Json?
  
  read            Boolean         @default(false)
  readAt          DateTime?
  
  createdAt       DateTime        @default(now())
}

// Security Events
model SecurityEvent {
  id          String   @id @default(cuid())
  eventType   String
  severity    String
  timestamp   DateTime @default(now())
  details     Json
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  ipAddress   String?
  userAgent   String?
  
  @@index([eventType])
  @@index([severity])
  @@index([timestamp])
  @@index([userId])
  @@index([ipAddress])
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  AUDITOR
  CPA_PARTNER
  CLIENT_ADMIN
  CLIENT_USER
  VIEWER
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum CompanySize {
  SMALL_1_50
  MEDIUM_51_200
  LARGE_201_500
  ENTERPRISE_501_1000
  ENTERPRISE_PLUS_1000
}

enum ComplianceStatus {
  NOT_STARTED
  IN_PROGRESS
  READY_FOR_AUDIT
  UNDER_AUDIT
  COMPLIANT
  NON_COMPLIANT
  EXPIRED
}

enum ProjectType {
  SOC1_TYPE1
  SOC1_TYPE2
  SOC2_TYPE1
  SOC2_TYPE2
  READINESS_ASSESSMENT
  GAP_REMEDIATION
  PENETRATION_TEST
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Framework {
  SOC1
  SOC2_SECURITY
  SOC2_AVAILABILITY
  SOC2_PROCESSING_INTEGRITY
  SOC2_CONFIDENTIALITY
  SOC2_PRIVACY
  ISO_27001
  HIPAA
  PCI_DSS
  GDPR
}

enum ImplementationStatus {
  NOT_IMPLEMENTED
  PARTIALLY_IMPLEMENTED
  IMPLEMENTED
  NOT_APPLICABLE
}

enum Effectiveness {
  NOT_TESTED
  EFFECTIVE
  PARTIALLY_EFFECTIVE
  NOT_EFFECTIVE
}

enum EvidenceType {
  SCREENSHOT
  DOCUMENT
  LOG_FILE
  CONFIGURATION
  REPORT
  ATTESTATION
  OTHER
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum FindingStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ACCEPTED
  FALSE_POSITIVE
}

enum RiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum TaskType {
  EVIDENCE_COLLECTION
  CONTROL_TESTING
  DOCUMENTATION
  REVIEW
  REMEDIATION
  OTHER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  COMPLETED
  CANCELLED
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum DocumentType {
  POLICY
  PROCEDURE
  WORK_INSTRUCTION
  FORM
  TEMPLATE
  REPORT
  OTHER
}

enum ReportType {
  SOC1_TYPE1
  SOC1_TYPE2
  SOC2_TYPE1
  SOC2_TYPE2
  READINESS_ASSESSMENT
  GAP_ANALYSIS
  EXECUTIVE_SUMMARY
  MANAGEMENT_LETTER
}

enum ReportStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  ISSUED
}

enum TestType {
  INQUIRY
  OBSERVATION
  INSPECTION
  REPERFORMANCE
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE
  EVIDENCE_REQUESTED
  FINDING_CREATED
  REPORT_READY
  AUDIT_STATUS_CHANGE
  SYSTEM
}