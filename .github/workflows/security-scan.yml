name: Security Scanning

# FREE security tools - no tokens required
# Runs on: push to main/develop, PRs, manual trigger
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: false
        type: choice
        options:
          - all
          - code
          - dependencies
          - secrets
        default: 'all'

env:
  NODE_VERSION: '20.x'
  PUPPETEER_SKIP_DOWNLOAD: 'true'

jobs:
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/javascript
            p/typescript
            p/nodejs
            p/security-audit
            p/secrets
            p/sql-injection
            p/xss
            p/jwt
            p/owasp-top-ten
        continue-on-error: true

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        directory:
          - .
          - services/auth-service
          - services/client-service
          - services/policy-service
          - services/control-service
          - services/evidence-service
          - services/workflow-service
          - services/reporting-service
          - services/audit-service
          - services/integration-service
          - services/notification-service
          - services/ai-service

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        working-directory: ${{ matrix.directory }}
        run: |
          if [ -f "package-lock.json" ]; then
            npm audit --audit-level=moderate --json > npm-audit-${{ strategy.job-index }}.json || true
            cat npm-audit-${{ strategy.job-index }}.json
          fi
        continue-on-error: true

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'soc-platform-${{ matrix.directory }}'
          path: '${{ matrix.directory }}'
          format: 'SARIF'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY || '' }}
        continue-on-error: true

      - name: Upload OWASP results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif
        continue-on-error: true

      - name: Upload npm audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results-${{ strategy.job-index }}
          path: npm-audit-${{ strategy.job-index }}.json
        continue-on-error: true

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_SUMMARY: true
        continue-on-error: true

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --force-use-all-plugins > secrets-baseline.json || true
          if [ -f secrets-baseline.json ]; then
            echo "Secrets baseline generated"
            cat secrets-baseline.json
          fi
        continue-on-error: true

      - name: Upload secrets baseline
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-baseline
          path: secrets-baseline.json
        continue-on-error: true

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security, secret-scan]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ${{ needs.code-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**All tools used are FREE** - no paid services required!" >> $GITHUB_STEP_SUMMARY
